#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SPECIALTIES 10
#define MAX_SECTIONS 5
#define MAX_COURSES 10
#define MAX_WAITLIST 100
#define MAX_STUDENTS 100
#define MAX_LINE_LENGTH 100

// Structures
typedef struct {
    char courseID[10];
    char day[10];
    char time[10];
} CourseSchedule;

typedef struct {
    char sectionName[10];
    char courses[MAX_COURSES][50];
    CourseSchedule planning[MAX_COURSES];
    int courseCount;
} Section;

typedef struct {
    char specialtyName[50];
    Section sections[MAX_SECTIONS];
    int sectionCount;
} Specialty;

typedef struct {
    char studentID[20];
    char courseID[10];
} WaitlistEntry;

typedef struct {
    char studentID[20];
    char completedCourses[MAX_COURSES][10];
    int courseCount;
} StudentHistory;

// Global Variables
Specialty specialties[MAX_SPECIALTIES];
int specialtyCount = 0;

WaitlistEntry waitlist[MAX_WAITLIST];
int waitlistCount = 0;

StudentHistory studentHistory[MAX_STUDENTS];
int studentCount = 0;

// Function Prototypes
void addSpecialty();
void addSection();
void addCourse();
void deleteSpecialty();
void deleteSection();
void deleteCourse();
void searchSpecialty();
void searchSection();
void searchCourse();
void addToWaitlist(char *studentID, char *courseID);
void enrollFromWaitlist(char *courseID);
void displayWaitlist();
void addCompletedCourse(char *studentID, char *courseID);
void displayCompletedCourses(char *studentID);
void saveToFile();
void loadFromFile();

// Main Function
int main() {
    loadFromFile(); // Load data at the start

    int choice;
    do {
        printf("\n=== Gestion des Parcours Universitaires ===\n");
        printf("1. Ajouter une specialite\n");
        printf("2. Ajouter une section\n");
        printf("3. Ajouter un cours\n");
        printf("4. Supprimer une specialite\n");
        printf("5. Supprimer une section\n");
        printf("6. Supprimer un cours\n");
        printf("7. Rechercher une specialite\n");
        printf("8. Rechercher une section\n");
        printf("9. Rechercher un cours\n");
        printf("10. Ajouter un etudiant a la file d'attente\n");
        printf("11. Inscrire un etudiant depuis la file d'attente\n");
        printf("12. Afficher la file d'attente\n");
        printf("13. Ajouter un cours termine\n");
        printf("14. Afficher les cours termines\n");
        printf("15. Sauvegarder\n");
        printf("16. Quitter\n");
        printf("Choisissez une option : ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: addSpecialty(); break;
            case 2: addSection(); break;
            case 3: addCourse(); break;
            case 4: deleteSpecialty(); break;
            case 5: deleteSection(); break;
            case 6: deleteCourse(); break;
            case 7: searchSpecialty(); break;
            case 8: searchSection(); break;
            case 9: searchCourse(); break;
            case 10: {
                char studentID[20], courseID[10];
                printf("Entrez l'ID de l'etudiant : ");
                scanf(" %s", studentID);
                printf("Entrez l'ID du cours : ");
                scanf(" %s", courseID);
                addToWaitlist(studentID, courseID);
                break;
            }
            case 11: {
                char courseID[10];
                printf("Entrez l'ID du cours : ");
                scanf(" %s", courseID);
                enrollFromWaitlist(courseID);
                break;
            }
            case 12: displayWaitlist(); break;
            case 13: {
                char studentID[20], courseID[10];
                printf("Entrez l'ID de l'etudiant : ");
                scanf(" %s", studentID);
                printf("Entrez l'ID du cours : ");
                scanf(" %s", courseID);
                addCompletedCourse(studentID, courseID);
                break;
            }
            case 14: {
                char studentID[20];
                printf("Entrez l'ID de l'etudiant : ");
                scanf(" %s", studentID);
                displayCompletedCourses(studentID);
                break;
            }
            case 15: saveToFile(); break;
            case 16: printf("Fermeture du programme.\n"); break;
            default: printf("Option invalide.\n");
        }
    } while (choice != 16);

    return 0;
}

// Function Definitions
void addSpecialty() {
    if (specialtyCount >= MAX_SPECIALTIES) {
        printf("Nombre maximum de specialites atteint !\n");
        return;
    }

    Specialty newSpecialty;
    printf("Entrez le nom de la specialite : ");
    scanf(" %s", newSpecialty.specialtyName);
    newSpecialty.sectionCount = 0;

    specialties[specialtyCount++] = newSpecialty;
    printf("Specialite ajoutee avec succes !\n");
}

void addSection() {
    if (specialtyCount == 0) {
        printf("Ajoutez d'abord une specialite !\n");
        return;
    }

    char specialtyName[50];
    printf("Entrez le nom de la specialite concernee : ");
    scanf(" %s", specialtyName);

    for (int i = 0; i < specialtyCount; i++) {
        if (strcmp(specialties[i].specialtyName, specialtyName) == 0) {
            if (specialties[i].sectionCount >= MAX_SECTIONS) {
                printf("Nombre maximum de sections atteint !\n");
                return;
            }

            Section newSection;
            printf("Entrez le nom de la section : ");
            scanf(" %s", newSection.sectionName);
            newSection.courseCount = 0;

            specialties[i].sections[specialties[i].sectionCount++] = newSection;
            printf("Section ajoutee avec succes !\n");
            return;
        }
    }
    printf("Specialite non trouvee !\n");
}

void addCourse() {
    if (specialtyCount == 0) {
        printf("Ajoutez d'abord une specialite et une section !\n");
        return;
    }

    char specialtyName[50], sectionName[10];
    printf("Entrez la specialite : ");
    scanf(" %s", specialtyName);
    printf("Entrez la section : ");
    scanf(" %s", sectionName);

    for (int i = 0; i < specialtyCount; i++) {
        if (strcmp(specialties[i].specialtyName, specialtyName) == 0) {
            for (int j = 0; j < specialties[i].sectionCount; j++) {
                if (strcmp(specialties[i].sections[j].sectionName, sectionName) == 0) {
                    if (specialties[i].sections[j].courseCount >= MAX_COURSES) {
                        printf("Nombre maximum de cours atteint !\n");
                        return;
                    }

                    int courseIndex = specialties[i].sections[j].courseCount;
                    printf("Entrez l'ID du cours : ");
                    scanf(" %s", specialties[i].sections[j].courses[courseIndex]);
                    printf("Entrez le jour du cours : ");
                    scanf(" %s", specialties[i].sections[j].planning[courseIndex].day);
                    printf("Entrez l'heure du cours : ");
                    scanf(" %s", specialties[i].sections[j].planning[courseIndex].time);

                    specialties[i].sections[j].courseCount++;
                    printf("Cours ajoute avec succes !\n");
                    return;
                }
            }
        }
    }
    printf("Specialite ou section non trouvee !\n");
}

void deleteSpecialty() {
    if (specialtyCount == 0) {
        printf("Aucune specialite disponible !\n");
        return;
    }

    char specialtyName[50];
    printf("Entrez le nom de la specialite a supprimer : ");
    scanf(" %s", specialtyName);

    for (int i = 0; i < specialtyCount; i++) {
        if (strcmp(specialties[i].specialtyName, specialtyName) == 0) {
            for (int j = i; j < specialtyCount - 1; j++) {
                specialties[j] = specialties[j + 1];
            }
            specialtyCount--;
            printf("Specialite supprimee avec succes !\n");
            return;
        }
    }
    printf("Specialite non trouvee !\n");
}

void deleteSection() {
    if (specialtyCount == 0) {
        printf("Aucune specialite disponible !\n");
        return;
    }

    char specialtyName[50], sectionName[10];
    printf("Entrez la specialite : ");
    scanf(" %s", specialtyName);
    printf("Entrez la section a supprimer : ");
    scanf(" %s", sectionName);

    for (int i = 0; i < specialtyCount; i++) {
        if (strcmp(specialties[i].specialtyName, specialtyName) == 0) {
            for (int j = 0; j < specialties[i].sectionCount; j++) {
                if (strcmp(specialties[i].sections[j].sectionName, sectionName) == 0) {
                    for (int k = j; k < specialties[i].sectionCount - 1; k++) {
                        specialties[i].sections[k] = specialties[i].sections[k + 1];
                    }
                    specialties[i].sectionCount--;
                    printf("Section supprimee avec succes !\n");
                    return;
                }
            }
            printf("Section non trouvee !\n");
            return;
        }
    }
    printf("Specialite non trouvee !\n");
}

void deleteCourse() {
    if (specialtyCount == 0) {
        printf("Aucune specialite disponible !\n");
        return;
    }

    char specialtyName[50], sectionName[10], courseID[10];
    printf("Entrez la specialite : ");
    scanf(" %s", specialtyName);
    printf("Entrez la section : ");
    scanf(" %s", sectionName);
    printf("Entrez l'ID du cours a supprimer : ");
    scanf(" %s", courseID);

    for (int i = 0; i < specialtyCount; i++) {
        if (strcmp(specialties[i].specialtyName, specialtyName) == 0) {
            for (int j = 0; j < specialties[i].sectionCount; j++) {
                if (strcmp(specialties[i].sections[j].sectionName, sectionName) == 0) {
                    for (int k = 0; k < specialties[i].sections[j].courseCount; k++) {
                        if (strcmp(specialties[i].sections[j].courses[k], courseID) == 0) {
                            for (int l = k; l < specialties[i].sections[j].courseCount - 1; l++) {
                                strcpy(specialties[i].sections[j].courses[l], specialties[i].sections[j].courses[l + 1]);
                                specialties[i].sections[j].planning[l] = specialties[i].sections[j].planning[l + 1];
                            }
                            specialties[i].sections[j].courseCount--;
                            printf("Cours supprime avec succes !\n");
                            return;
                        }
                    }
                    printf("Cours non trouve !\n");
                    return;
                }
            }
            printf("Section non trouvee !\n");
            return;
        }
    }
    printf("Specialite non trouvee !\n");
}

void searchSpecialty() {
    if (specialtyCount == 0) {
        printf("Aucune specialite disponible !\n");
        return;
    }

    char specialtyName[50];
    printf("Entrez le nom de la specialite a rechercher : ");
    scanf(" %s", specialtyName);

    for (int i = 0; i < specialtyCount; i++) {
        if (strcmp(specialties[i].specialtyName, specialtyName) == 0) {
            printf("Specialite trouvee : %s\n", specialties[i].specialtyName);
            for (int j = 0; j < specialties[i].sectionCount; j++) {
                printf("  Section : %s\n", specialties[i].sections[j].sectionName);
                for (int k = 0; k < specialties[i].sections[j].courseCount; k++) {
                    printf("    Cours : %s, %s, %s\n", specialties[i].sections[j].courses[k],
                           specialties[i].sections[j].planning[k].day,
                           specialties[i].sections[j].planning[k].time);
                }
            }
            return;
        }
    }
    printf("Specialite non trouvee !\n");
}

void searchSection() {
    if (specialtyCount == 0) {
        printf("Aucune specialite disponible !\n");
        return;
    }

    char specialtyName[50], sectionName[10];
    printf("Entrez la specialite : ");
    scanf(" %s", specialtyName);
    printf("Entrez la section a rechercher : ");
    scanf(" %s", sectionName);

    for (int i = 0; i < specialtyCount; i++) {
        if (strcmp(specialties[i].specialtyName, specialtyName) == 0) {
            for (int j = 0; j < specialties[i].sectionCount; j++) {
                if (strcmp(specialties[i].sections[j].sectionName, sectionName) == 0) {
                    printf("Section trouvee : %s\n", specialties[i].sections[j].sectionName);
                    for (int k = 0; k < specialties[i].sections[j].courseCount; k++) {
                        printf("  Cours : %s, %s, %s\n", specialties[i].sections[j].courses[k],
                               specialties[i].sections[j].planning[k].day,
                               specialties[i].sections[j].planning[k].time);
                    }
                    return;
                }
            }
            printf("Section non trouvee !\n");
            return;
        }
    }
    printf("Specialite non trouvee !\n");
}

void searchCourse() {
    if (specialtyCount == 0) {
        printf("Aucune specialite disponible !\n");
        return;
    }

    char specialtyName[50], sectionName[10], courseID[10];
    printf("Entrez la specialite : ");
    scanf(" %s", specialtyName);
    printf("Entrez la section : ");
    scanf(" %s", sectionName);
    printf("Entrez l'ID du cours a rechercher : ");
    scanf(" %s", courseID);

    for (int i = 0; i < specialtyCount; i++) {
        if (strcmp(specialties[i].specialtyName, specialtyName) == 0) {
            for (int j = 0; j < specialties[i].sectionCount; j++) {
                if (strcmp(specialties[i].sections[j].sectionName, sectionName) == 0) {
                    for (int k = 0; k < specialties[i].sections[j].courseCount; k++) {
                        if (strcmp(specialties[i].sections[j].courses[k], courseID) == 0) {
                            printf("Cours trouve : %s, %s, %s\n", specialties[i].sections[j].courses[k],
                                   specialties[i].sections[j].planning[k].day,
                                   specialties[i].sections[j].planning[k].time);
                            return;
                        }
                    }
                    printf("Cours non trouve !\n");
                    return;
                }
            }
            printf("Section non trouvee !\n");
            return;
        }
    }
    printf("Specialite non trouvee !\n");
}

void addToWaitlist(char *studentID, char *courseID) {
    if (waitlistCount >= MAX_WAITLIST) {
        printf("La file d'attente est pleine !\n");
        return;
    }

    strcpy(waitlist[waitlistCount].studentID, studentID);
    strcpy(waitlist[waitlistCount].courseID, courseID);
    waitlistCount++;
    printf("Etudiant ajoute a la file d'attente pour le cours %s.\n", courseID);
}

void enrollFromWaitlist(char *courseID) {
    for (int i = 0; i < waitlistCount; i++) {
        if (strcmp(waitlist[i].courseID, courseID) == 0) {
            printf("Etudiant %s inscrit au cours %s.\n", waitlist[i].studentID, courseID);

            for (int j = i; j < waitlistCount - 1; j++) {
                waitlist[j] = waitlist[j + 1];
            }
            waitlistCount--;
            return;
        }
    }
    printf("Aucun etudiant en attente pour ce cours.\n");
}

void displayWaitlist() {
    if (waitlistCount == 0) {
        printf("La file d'attente est vide.\n");
        return;
    }

    printf("File d'attente :\n");
    for (int i = 0; i < waitlistCount; i++) {
        printf("Etudiant : %s, Cours : %s\n", waitlist[i].studentID, waitlist[i].courseID);
    }
}

void addCompletedCourse(char *studentID, char *courseID) {
    for (int i = 0; i < studentCount; i++) {
        if (strcmp(studentHistory[i].studentID, studentID) == 0) {
            if (studentHistory[i].courseCount >= MAX_COURSES) {
                printf("Nombre maximum de cours atteint pour cet etudiant.\n");
                return;
            }

            strcpy(studentHistory[i].completedCourses[studentHistory[i].courseCount], courseID);
            studentHistory[i].courseCount++;
            printf("Cours %s ajoute a l'historique de l'etudiant %s.\n", courseID, studentID);
            return;
        }
    }

    if (studentCount >= MAX_STUDENTS) {
        printf("Nombre maximum d'etudiants atteint.\n");
        return;
    }

    strcpy(studentHistory[studentCount].studentID, studentID);
    strcpy(studentHistory[studentCount].completedCourses[0], courseID);
    studentHistory[studentCount].courseCount = 1;
    studentCount++;
    printf("Cours %s ajoute a l'historique de l'etudiant %s.\n", courseID, studentID);
}

void displayCompletedCourses(char *studentID) {
    for (int i = 0; i < studentCount; i++) {
        if (strcmp(studentHistory[i].studentID, studentID) == 0) {
            printf("Cours completes par l'etudiant %s :\n", studentID);
            for (int j = 0; j < studentHistory[i].courseCount; j++) {
                printf("  %s\n", studentHistory[i].completedCourses[j]);
            }
            return;
        }
    }
    printf("Aucun cours trouve pour cet etudiant.\n");
}

void saveToFile() {
    FILE *file = fopen("parcours.txt", "w");
    if (!file) {
        printf("Erreur de sauvegarde !\n");
        return;
    }

    for (int i = 0; i < specialtyCount; i++) {
        fprintf(file, "Specialite: %s\n", specialties[i].specialtyName);
        for (int j = 0; j < specialties[i].sectionCount; j++) {
            fprintf(file, "  Section: %s\n", specialties[i].sections[j].sectionName);
            for (int k = 0; k < specialties[i].sections[j].courseCount; k++) {
                fprintf(file, "    Cours: %s, %s, %s\n", specialties[i].sections[j].courses[k],
                        specialties[i].sections[j].planning[k].day,
                        specialties[i].sections[j].planning[k].time);
            }
        }
    }

    for (int i = 0; i < waitlistCount; i++) {
        fprintf(file, "Waitlist: %s, %s\n", waitlist[i].studentID, waitlist[i].courseID);
    }

    for (int i = 0; i < studentCount; i++) {
        fprintf(file, "Completed: %s", studentHistory[i].studentID);
        for (int j = 0; j < studentHistory[i].courseCount; j++) {
            fprintf(file, ", %s", studentHistory[i].completedCourses[j]);
        }
        fprintf(file, "\n");
    }

    fclose(file);
    printf("Donnees sauvegardees avec succes !\n");
}

void loadFromFile() {
    FILE *file = fopen("parcours.txt", "r");
    if (!file) {
        printf("Fichier non trouve ou impossible a ouvrir.\n");
        return;
    }

    char line[MAX_LINE_LENGTH];
    while (fgets(line, sizeof(line), file)) {
        printf("Chargement : %s", line);
        // Add parsing logic here to load data into structures
    }

    fclose(file);
    printf("Donnees chargees avec succes.\n");
}
